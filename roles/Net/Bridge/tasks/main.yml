---

# ----- detect Network interface and type 

- name: Detect Network interface
  shell: |
    ip -o link show | awk -F': ' '{print $2}' | grep -E '^(wlp|eno|eth|ens|enp)'
  register: device_detection
  changed_when: false
  failed_when: false

- name: Set detected Network interface
  set_fact:
    nw_device: "{{ interface_detection.stdout_lines[0] }}"
  when: interface_detection.stdout_lines | length > 0

- name: Check if Network interface is present
  fail:
    msg: "No Network interface detected. Exiting playbook."
  when: interface_detection.stdout_lines | length == 0

- name: Echo Network device 
  debug: 
    msg: "The nw_interface is: {{ nw_interface }}"

- name: Set nw_type based on nw_interface prefix
  set_fact:
    nw_type: "{{ 'wireless' if nw_device is match('^(wlp|xxx).*') else 'ethernet' }}"

- name: Echo Network type
  debug: 
    msg: "The nw_type is: {{ nw_type }}"
    
# ----- detect Network renderer 

- name: Detect system type and set nw_renderer
  block:
    - name: Set network renderer to NetworkManager for Xubuntu
      set_fact:
        nw_renderer: "NetworkManager"
      when: has_xfce

    - name: Set network renderer to networkd for Ubuntu Server
      set_fact:
        nw_renderer: "networkd"
      when: not has_xfce

- name: Echo Network renderer
  debug: 
    msg: "The nw_renderer is: {{ nw_renderer }}"

# ----- Install Dependencies 

- name: install networking packages
  become: true
  apt:
    name:
      - bridge-utils
      - network-manager
      - net-tools
    state: present
    update_cache: yes

# ----- Write config files 

- name: create backup directory
  file: 
    path: "/home/{{gen_user}}/.netconf/{{inventory_hostname}}/backup"
    state: directory 
    group: "{{gen_user}}"
    owner: "{{gen_user}}"

- name: create wifi directory
  file: 
    path: "/home/{{gen_user}}/.netconf/{{inventory_hostname}}/wifi"
    state: directory 
    group: "{{gen_user}}"
    owner: "{{gen_user}}"
  when: nw_type is 'wireless'

- name: create netplan directory 
  file: 
    path: /etc/netplan 
    state: directory
    owner: root 
    group: root 
  become: true 
  
- name: remove old config files 
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /home/{{gen_user}}/.netconf/{{inventory_hostname}}/99-ovs-bridge.yaml

- name: Write netplan configuration file for ethernet 
  template:
    src: netplan_ethernet.yaml.j2 
    dest: /home/{{gen_user}}/.netconf/{{inventory_hostname}}/99-bridge.yaml
  when: nw_type is 'ethernet'

- name: Write netplan configuration file for wifi
  template:
    src: netplan_wireless.yaml.j2 
    dest: /home/{{gen_user}}/.netconf/{{inventory_hostname}}/wifi/99-bridge.yaml
  when: nw_type is 'wireless'
