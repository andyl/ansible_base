---

# ipfs

- name: create pkg dir
  become: no
  file: 
    path: /home/{{rem_user}}/.pkg 
    state: directory 
    group: "{{rem_user}}"
    owner: "{{rem_user}}"

- name: get tar file
  become: no
  get_url: 
    url:  https://dist.ipfs.io/{{item.pkg}}/{{item.vsn}}/{{item.pkg}}_{{item.vsn}}_linux-amd64.tar.gz
    dest: /home/{{rem_user}}/.pkg/{{item.pkg}}_{{item.vsn}}.tar.gz
  with_items: "{{ipfs_vars}}"

- name: extract tar file
  become: no
  # shell: mkdir -p {{item.pkg}}_{{item.vsn}} && tar -xf {{item.pkg}}_{{item.vsn}}.tar.gz -C tor-browser-linux64-{{tor_browser_version}} --strip-components=1
  shell: mkdir -p {{item.pkg}}_{{item.vsn}} && tar -xf {{item.pkg}}_{{item.vsn}}.tar.gz -C {{item.pkg}}_{{item.vsn}} 
  args:
      chdir: /home/{{rem_user}}/.pkg
      creates: /home/{{rem_user}}/.pkg/{{item.pkg}}_{{item.vsn}}
  with_items: "{{ipfs_vars}}"

- name: create symlink
  become: yes
  file:
    src:  /home/{{rem_user}}/.pkg/{{item.pkg}}_{{item.vsn}}/{{item.pkg}}/{{item.exe}}
    dest: /usr/bin/{{item.exe}}
    state: link 
  with_items: "{{ipfs_vars}}"

- name: create mount directories
  become: yes
  file:
    path:  "{{item}}"
    state: directory
    group: "{{rem_user}}"
    owner: "{{rem_user}}"
  with_items:
    - /ipfs
    - /ipns

- name: install service file
  become: true
  template: 
    src:   ipfs.service
    dest:  /lib/systemd/system
    owner: root 
    group: root
    mode:  "a+r"
  notify: restart ipfs


