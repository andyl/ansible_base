# {{ansible_managed}}
# Updated {{ansible_date_time.date}}
# {{template_path}}

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[tags]
  host_type = "dev"
  host_arch = "{{ansible_architecture}}"
  host_dist = "{{ansible_distribution_version}}"
  host_cpus = "{{ansible_processor_count}}"

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all inputs
  interval = "30s"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Telegraf will cache metric_buffer_limit metrics for each output, and will
  # flush this buffer on a successful write.
  metric_buffer_limit = 10000

  # Collection jitter is used to jitter the collection by a random amount.
  # Each plugin will sleep for a random time within jitter before collecting.
  # This can be used to avoid many plugins querying things like sysfs at the
  # same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  # Default data flushing interval for all outputs. You should not set this below
  # interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"

  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  # Run telegraf in debug mode
  debug = false
  # Run telegraf in quiet mode
  quiet = false
  # Override default hostname, if empty use os.Hostname()
  hostname = "{{ansible_host}}"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["udp://{{influxdb_hostname}}:8089"] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "telegraf" # required
  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # If not provided, will default to 0 (no timeout)
  # timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512

###############################################################################
#                                  INPUTS                                     #
###############################################################################


# Inserts sine and cosine waves for demonstration purposes
# [[inputs.trig]]
  # Set the amplitude
  # amplitude = 10.0

# Read metrics about cpu usage
[[inputs.cpu]]
  # Whether to report per-cpu stats or not
  percpu = false
  # Whether to report total system cpu stats or not
  totalcpu = true
  # Comment this line if you want the raw CPU time metrics
  # drop = ["time_*"]
  pass = ["usage_user"]

# Read metrics about disk usage by mount point
[[inputs.disk]]
  # By default, telegraf gather stats for all mountpoints.
  # Setting mountpoints will restrict the stats to the specified mountpoints.
  mount_points = ["/"]
  pass = ["free", "total", "used"]

# Read metrics about disk IO by device
[[inputs.diskio]]
  # By default, telegraf will gather stats for all devices including
  # disk partitions.
  # Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  # Uncomment the following line if you do not need disk serial numbers.
  # skip_serial_number = true
  pass = ["read_bytes", "write_bytes"]

# Read InfluxDB-formatted JSON metrics from one or more HTTP endpoints
# [[inputs.influxdb]]
  # Works with InfluxDB debug endpoints out of the box,
  # but other services can use this format too.
  # See the influxdb plugin's README for more details.

  # Multiple URLs from which to read InfluxDB-formatted JSON
  # urls = [
  #   "http://localhost:8086/debug/vars"
  # ]

# Gathers metrics from the /3.0/reports MailChimp API
# [[inputs.mailchimp]]
  # MailChimp API key
  # get from https://admin.mailchimp.com/account/api/
  # api_key = "" # required
  # Reports for campaigns sent more than days_old ago will not be collected.
  # 0 means collect all.
  # days_old = 0
  # Campaign ID to get, if empty gets all campaigns, this option overrides days_old
  # campaign_id = ""

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration
  pass = ["total", "used", "used_percent", "available", "available_percent"]

# Read metrics from one or many memcached servers
# [[inputs.memcached]]
  # An array of address to gather stats about. Specify an ip on hostname
  # with optional port. ie localhost, 10.0.0.1:11211, etc.
  #
  # If no servers are specified, then localhost is used as the host.
  # servers = ["localhost:11211"]
  # unix_sockets = ["/var/run/memcached.sock"]

# Read metrics about network interface usage
[[inputs.net]]
  # By default, telegraf gathers stats from any up interface (excluding loopback)
  # Setting interfaces will tell it to gather these explicit interfaces,
  # regardless of status.
  #
  # interfaces = ["eth0", ... ]
  pass = ["bytes_recv", "bytes_sent"]

# Read metrics about TCP status such as established, time wait etc and UDP sockets counts.
# [[inputs.netstat]]
  # no configuration

# Read Nginx's basic status information (ngx_http_stub_status_module)
# [[inputs.nginx]]
  # An array of Nginx stub_status URI to gather stats.
  # urls = ["http://localhost/status"]

# Ping given url(s) and return statistics
# [[inputs.ping]]
  # urls to ping
  # urls = ["www.google.com"] # required
  # number of pings to send (ping -c <COUNT>)
  # count = 1 # required
  # interval, in s, at which to ping. 0 == default (ping -i <PING_INTERVAL>)
  # ping_interval = 0.0
  # ping timeout, in s. 0 == no timeout (ping -t <TIMEOUT>)
  # timeout = 0.0
  # interface to send ping from (ping -I <INTERFACE>)
  # interface = ""

# Read metrics from one or many postgresql servers
# [[inputs.postgresql]]
  # specify address via a url matching:
  #   postgres://[pqgotest[:password]]@localhost[/dbname]?sslmode=[disable|verify-ca|verify-full]
  # or a simple string:
  #   host=localhost user=pqotest password=... sslmode=... dbname=app_production
  #
  # All connection parameters are optional.
  #
  # Without the dbname parameter, the driver will default to a database
  # with the same name as the user. This dbname is just for instantiating a
  # connection with the server and doesn't restrict the databases we are trying
  # to grab metrics for.
  #
  # address = "host=localhost user=postgres sslmode=disable"

  # A list of databases to pull metrics about. If not specified, metrics for all
  # databases are gathered.
  # databases = ["app_production", "testing"]

# Monitor process cpu and memory usage
# [[inputs.procstat]]
  # Must specify one of: pid_file, exe, or pattern
  # PID file to monitor process
  # pid_file = "/var/run/nginx.pid"
  # executable name (ie, pgrep <exe>)
  # exe = "nginx"
  # pattern as argument for pgrep (ie, pgrep -f <pattern>)
  # pattern = "nginx"

  # Field name prefix
  # prefix = ""

# Read metrics from one or many redis servers
# [[inputs.redis]]
  # specify servers via a url matching:
  #  [protocol://][:password]@address[:port]
  #  e.g.
  #    tcp://localhost:6379
  #    tcp://:password@192.168.99.100
  #
  # If no servers are specified, then localhost is used as the host.
  # If no port is specified, 6379 is used
  # servers = ["tcp://localhost:6379"]

# Read metrics about swap memory usage
# [[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

###############################################################################
#                              SERVICE INPUTS                                 #
###############################################################################

